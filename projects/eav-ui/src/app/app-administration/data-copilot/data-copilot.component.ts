import { HttpClient } from '@angular/common/http';
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatIconModule } from '@angular/material/icon';
import { MatSelectModule } from '@angular/material/select';
import { Context as DnnContext } from '@2sic.com/sxc-angular';
import { Context } from '../../shared/services/context';
import { map, share, shareReplay, take } from 'rxjs';
import { CommonModule } from '@angular/common';
import { RichResult } from '../../shared/models/rich-result';
import { MatSnackBar } from '@angular/material/snack-bar';

interface EditionData extends RichResult {
  editions: Edition[];
  isConfigured: boolean;
}
interface Edition {
  name: string;
  description: string;
  isDefault?: boolean;
}

@Component({
  selector: 'app-data-copilot',
  standalone: true,
  imports: [MatSelectModule, MatButtonModule, MatCardModule, MatIconModule, ReactiveFormsModule, CommonModule],
  templateUrl: './data-copilot.component.html',
  styleUrl: './data-copilot.component.scss'
})
export class DataCopilotComponent {

  editionForm: FormGroup;
  webApiEditions: string = 'admin/code/getEditions';
  webApiGeneratedCode: string = 'admin/code/generateDataModels';
  editions$ = this.getEditionsFromApi();

  constructor(
    private fb: FormBuilder,
    private http: HttpClient,
    private dnnContext: DnnContext,
    private context: Context,
    private snackBar: MatSnackBar) {
  }

  ngOnInit(): void {
    // Setup the form with an initial empty value
    this.editionForm = this.fb.group({
      edition: ['']
    });

    // Once the editions arrived, update the preselected value with the isDefault
    this.editions$.pipe(take(1))
      .subscribe(editions => {
        // find default
        const defaultEdition = this.getDefaultEdition(editions);
        this.editionForm.setValue({ edition: defaultEdition?.name ?? '' });
      });

  }


  getEditionsFromApi() {
    return this.http.get<EditionData>(this.dnnContext.$2sxc.http.apiUrl(this.webApiEditions), {
      params: {
        appId: this.context.appId.toString()
      }
    }).pipe(
      map((editions) => {
        const firstDefault = this.getDefaultEdition(editions.editions);
        return editions.editions.map(d => {
          const marker = d == firstDefault
            ? ' ✅'
            : d.isDefault // in this case it's not the first, but it's another default - should not happen
              ? ' ☑️'
              : '';
          return {
            ...d,
            description: (d.description || "no description provided") + marker,
            label: `/${d.name}/AppCode/Data`.replace(/\/\//g, '/'),
          };
        });
      }),
      shareReplay(1),
    );
  }

  private getDefaultEdition(editions: Edition[]): Edition {
    return editions.find(d => d.isDefault) ?? editions.find(d => d.name === '') ?? editions[0];
  }

  autoGeneratedCode() {
    // console.log(this.editionForm.value.edition)
   this.http.get<RichResult>(this.dnnContext.$2sxc.http.apiUrl(this.webApiGeneratedCode), {
      params: {
        appId: this.context.appId.toString(),
        edition: this.editionForm.value.edition
      }
    }).subscribe(d => {
      console.log(d);
      this.snackBar.open(d.message + `\n (this took ${d.timeTaken}ms)`, null, { duration: 5000, });
    });
  }

}
